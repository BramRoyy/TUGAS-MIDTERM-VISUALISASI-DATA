# -*- coding: utf-8 -*-
"""Tugas Visualisasi Data_Exploratory Data Analysis_1301213202_Abraham Roy Rudianto

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P6e2T3iRjucx0T5vmujTHoqGxCp9Mspi

# **Tugas Visualisasi Data**
## **Exploratory Data Analysis**

## **Studi Kasus: Analisis Efektivitas Kebijakan Publik (PPKM, PSBB, dll)**
### Nama: Abraham Roy Rudianto
### NIM: 1301213202
### Mata Kuliah: Visualisasi Data
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from scipy.signal import find_peaks
import warnings
warnings.filterwarnings('ignore')

# --- 1. LOAD & CLEAN ---
df = pd.read_csv('covid.csv')
df['Date'] = pd.to_datetime(df['Date'], dayfirst=True, errors='coerce')

# Bersihkan rate
df['Case Fatality Rate'] = pd.to_numeric(df['Case Fatality Rate'].astype(str).str.replace('%', ''), errors='coerce')
df['Case Recovered Rate'] = pd.to_numeric(df['Case Recovered Rate'].astype(str).str.replace('%', ''), errors='coerce')

# Filter nasional & hapus Date kosong
df_idn = df[df['Location Level'] == 'Country'].dropna(subset=['Date']).copy()
df_idn = df_idn.sort_values('Date').reset_index(drop=True)

print(f"Data nasional: {len(df_idn)} hari | {df_idn['Date'].min().date()} â†’ {df_idn['Date'].max().date()}")

df_idn.describe(include='all').T

missing_summary = df.isnull().sum().sort_values(ascending=False)
missing_pct = (missing_summary / len(df)) * 100
missing_df = pd.DataFrame({'Missing Values': missing_summary, 'Percentage (%)': missing_pct})
missing_df.head(15)

plt.figure(figsize=(10, 4))
sns.heatmap(df_idn.isnull(), cbar=False, yticklabels=False, cmap='viridis')
plt.title('Missing Values di Data Nasional')
plt.show()

# Drop kolom yang 100% NaN
df = df.dropna(axis=1, how='all')

# Drop kolom dengan missing > 50%
missing_pct = df.isnull().mean()
df = df.loc[:, missing_pct < 0.5]

print("Jumlah kolom setelah drop:", df.shape[1])
df.isnull().sum().sort_values(ascending=False).head(10)

df.info()

plt.figure(figsize=(14,6))
plt.plot(df_idn['Date'], df_idn['Total Deaths'], label='Deaths', color='red')
plt.plot(df_idn['Date'], df_idn['Total Recovered'], label='Recoveries', color='green')
plt.legend(); plt.title('Tren Deaths & Recoveries'); plt.grid(alpha=0.3); plt.show()

plt.figure(figsize=(10,5))
sns.histplot(df_idn['New Cases per Million'], bins=50, kde=True, color='purple')
plt.title('Distribusi Kasus Baru per Juta Penduduk')
plt.show()

import matplotlib.pyplot as plt

plt.figure(figsize=(10,5))
plt.plot(df_idn['Date'], df_idn['New Cases'], label='Kasus Baru')
plt.axvline(pd.to_datetime('2021-07-05'), color='r', linestyle='--', label='Mulai PPKM')
plt.legend()
plt.title("Tren Kasus Baru Sebelum dan Sesudah PPKM")
plt.xlabel("Tanggal")
plt.ylabel("Jumlah Kasus")
plt.show()

# --- 4. TREN KASUS + 7-DAY ROLLING ---
df_idn['New Cases 7D'] = df_idn['New Cases'].rolling(7, center=True).mean()

plt.figure(figsize=(15, 6))
plt.plot(df_idn['Date'], df_idn['New Cases'], alpha=0.3, label='Harian', color='gray')
plt.plot(df_idn['Date'], df_idn['New Cases 7D'], label='7-Day Avg', color='red', linewidth=2.5)
plt.axvline(pd.to_datetime('2021-07-03'), color='black', linestyle='--', linewidth=2, label='PPKM Mulai')
plt.title('Tren Kasus Harian COVID-19 Indonesia', fontsize=16)
plt.legend(); plt.grid(alpha=0.3); plt.show()

top_prov = (df[df['Location Level'] == 'Province']
            .groupby('Province')['Total Cases']
            .max()
            .sort_values(ascending=False)
            .head(10))

plt.figure(figsize=(10,5))
sns.barplot(x=top_prov.values, y=top_prov.index, palette='Reds_r')
plt.title('10 Provinsi dengan Total Kasus COVID-19 Tertinggi')
plt.xlabel('Total Cases')
plt.show()

df_idn['YearMonth'] = df_idn['Date'].dt.to_period('M')
monthly_cases = df_idn.groupby('YearMonth')['New Cases'].sum()

plt.figure(figsize=(12,6))
monthly_cases.plot(kind='bar', color='salmon')
plt.title('Total Kasus Baru per Bulan')
plt.ylabel('Jumlah Kasus')
plt.xticks(rotation=45)
plt.show()

# --- 5. DETEKSI PUNCAK ---
peaks, _ = find_peaks(df_idn['New Cases 7D'], height=30000, distance=14)
peak_date = df_idn.loc[peaks[-1], 'Date'] if len(peaks) > 0 else df_idn['New Cases 7D'].idxmax()
peak_cases = df_idn.loc[peak_date, 'New Cases 7D']

plt.figure(figsize=(15, 6))
plt.plot(df_idn['Date'], df_idn['New Cases 7D'], color='red')
plt.scatter(df_idn.loc[peaks, 'Date'], df_idn.loc[peaks, 'New Cases 7D'], color='black', s=80, label='Puncak')
plt.axvline(pd.to_datetime('2021-07-03'), color='black', linestyle='--', label='PPKM')
plt.annotate(f'Puncak: {peak_cases:,.0f}', xy=(peak_date, peak_cases), xytext=(peak_date, peak_cases + 5000),
             arrowprops=dict(arrowstyle='->'), fontsize=12)
plt.title('Deteksi Puncak Kasus'); plt.legend(); plt.show()

# --- 6. BEFORE vs AFTER PPKM ---
ppkm = pd.to_datetime('2021-07-03')
before = df_idn[df_idn['Date'] < ppkm]['New Cases 7D'].mean()
after = df_idn[df_idn['Date'] >= ppkm]['New Cases 7D'].mean()
decline = ((before - after) / before) * 100

print(f"Rata-rata sebelum PPKM: {before:,.0f}")
print(f"Rata-rata setelah PPKM: {after:,.0f}")
print(f"Penurunan: {decline:.1f}%")

ppkm_periods = {
    "PSBB Awal": ("2020-04-10", "2020-06-04"),
    "PPKM Darurat": ("2021-07-03", "2021-07-20"),
    "PPKM Level 1-4": ("2021-07-21", "2021-09-14"),
    "PPKM Transisi": ("2021-09-15", "2022-02-28")
}

plt.figure(figsize=(14,6))
plt.plot(df_idn['Date'], df_idn['New Cases'], label='Kasus Harian', color='blue', linewidth=2)

# Periode kebijakan dengan warna berbeda
policy_colors = {
    "PSBB Awal": "orange",
    "PPKM Darurat": "red",
    "PPKM Level 1-4": "green",
    "PPKM Transisi": "purple"
}

for policy, (start, end) in ppkm_periods.items():
    plt.axvspan(pd.to_datetime(start), pd.to_datetime(end),
                color=policy_colors[policy], alpha=0.15, label=policy)

plt.title("ðŸ“ˆ Tren Kasus COVID-19 Selama Periode PSBB dan PPKM", fontsize=14)
plt.xlabel("Tanggal", fontsize=12)
plt.ylabel("Jumlah Kasus Harian", fontsize=12)
plt.legend(loc="upper left", fontsize=9)
plt.grid(alpha=0.3)
plt.tight_layout()
plt.show()

for policy, (start, end) in ppkm_periods.items():
    before = df_idn[(df_idn['Date'] < start) & (df_idn['Date'] >= pd.to_datetime(start) - pd.Timedelta(days=14))]
    during = df_idn[(df_idn['Date'] >= start) & (df_idn['Date'] <= end)]

    # Removed plt.text as it was causing the image size error
    # plt.text(pd.to_datetime(start), df_idn['New Cases'].max()*0.8,
    #          f"{policy}\nâ†“{(1 - during['New Cases'].mean()/before['New Cases'].mean()):.0%}",
    #          fontsize=9, color='black')

for policy, (start, end) in ppkm_periods.items():
    before = df_idn[(df_idn['Date'] < start) & (df_idn['Date'] >= pd.to_datetime(start) - pd.Timedelta(days=14))]
    during = df_idn[(df_idn['Date'] >= start) & (df_idn['Date'] <= end)]

    reduction = (1 - during['New Cases'].mean()/before['New Cases'].mean()) * 100
    print(f"{policy}: Rata-rata kasus turun sebesar {reduction:.2f}% setelah kebijakan diterapkan.")

# --- 7. CFR & TESTING ---
df_idn['CFR 7D'] = df_idn['Case Fatality Rate'].rolling(7).mean()
plt.figure(figsize=(12, 5))
plt.plot(df_idn['Date'], df_idn['CFR 7D'], color='purple')
plt.axvline(pd.to_datetime('2021-07-03'), color='black', linestyle='--')
plt.title('Tren Case Fatality Rate (CFR)'); plt.ylabel('CFR (%)'); plt.show()

plt.figure(figsize=(14,6))
plt.plot(df_idn['Date'], df_idn['Case Fatality Rate'], label='Fatality Rate (%)', color='black')
plt.plot(df_idn['Date'], df_idn['Case Recovered Rate'], label='Recovery Rate (%)', color='blue')
plt.legend(); plt.title('Perubahan Case Fatality & Recovery Rate'); plt.grid(alpha=0.3); plt.show()

# --- 8. KORELASI ---
corr = df_idn[['New Cases', 'Total Deaths', 'Case Fatality Rate', 'Growth Factor of New Cases']].corr()
plt.figure(figsize=(8, 6))
sns.heatmap(corr, annot=True, cmap='coolwarm', center=0)
plt.title('Korelasi Variabel Utama'); plt.show()

corr_features = ['New Cases', 'New Deaths', 'Total Cases', 'Total Deaths',
                 'Population', 'Population Density',
                 'Case Fatality Rate', 'Case Recovered Rate']
plt.figure(figsize=(10,8))
sns.heatmap(df_idn[corr_features].corr(numeric_only=True), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Korelasi Antar Variabel Penting')
plt.show()

# --- HITUNG NILAI REAL (dari data Anda) ---
ppkm_date = pd.to_datetime('2021-07-03')

# Cari puncak
peak_idx = df_idn['New Cases 7D'].idxmax()
peak_date = df_idn.loc[peak_idx, 'Date']
lag_days = (peak_date - ppkm_date).days

# Hitung rata-rata sebelum & setelah PPKM
before_ppkm = df_idn[df_idn['Date'] < ppkm_date]['New Cases 7D'].mean()
after_ppkm = df_idn[df_idn['Date'] >= ppkm_date]['New Cases 7D'].mean()
decline_rate = ((before_ppkm - after_ppkm) / before_ppkm) * 100 if before_ppkm > 0 else 0

# Hitung CFR sebelum & setelah
cfr_before = df_idn[df_idn['Date'] < ppkm_date]['Case Fatality Rate'].mean()
cfr_after = df_idn[df_idn['Date'] >= ppkm_date]['Case Fatality Rate'].mean()
cfr_decline = ((cfr_before - cfr_after) / cfr_before) * 100 if cfr_before > 0 else 0

print(f"Rata-rata kasus sebelum PPKM: {before_ppkm:,.0f}")
print(f"Rata-rata kasus setelah PPKM: {after_ppkm:,.0f}")
print(f"Penurunan kasus: {decline_rate:.1f}%")
print(f"CFR sebelum: {cfr_before:.2f}% | Setelah: {cfr_after:.2f}% | Penurunan CFR: {cfr_decline:.1f}%")